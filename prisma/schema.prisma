datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  events        Event[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}

enum EventType {
  WEDDING
  BIRTHDAY
  OPENING
  ANNIVERSARY
  PARTY
  PARADE
  CONGRESS
  PRODUCT_LAUNCH
  OTHER
}

enum EventOrganization {
  COORDINATION
  PARTIAL
  COMPREHENSIVE
}

model Event {
  id           String            @id @default(cuid())
  name         String
  time         String
  date         DateTime          @db.Date
  archived     Boolean           @default(false)
  type         EventType
  organization EventOrganization
  task         Task[]
  budget       Budget[]
  guest        Guest[]
  information  Information[]
  provider     Provider?         @relation(fields: [providerId], references: [id])
  providerId   String?
  user         User?             @relation(fields: [userId], references: [id])
  userId       String?
}

model Information {
  id         String  @id @default(cuid())
  full_name  String
  children   String?
  father     String?
  mother     String?
  brothers   String?
  godparents String?
  witnesses  String?
  nutrition  String?
  allergies  String?
  drinks     String?
  event      Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String
}

enum GuestType {
  AT_THE_BEGINNING
  AFTERWARDS
  TO_BE_CONFIRMED
}

model Guest {
  id           String    @id @default(cuid())
  first_name   String
  last_name    String
  guest_type   GuestType
  observation  String?
  table_number Int?
  event        Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      String
}

enum TaskLabel {
  ANA
  BELEN
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id       String        @id @default(cuid())
  title    String
  status   TaskStatus
  label    TaskLabel?
  priority TaskPriority?
  event    Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String
}

enum City {
  SAN_MIGUEL_DE_TUCUMAN
  TAFI_VIEJO
  YERBA_BUENA
  LULES
  TAFI_DEL_VALLE
}

model Provider {
  id       String   @id @default(cuid())
  name     String
  address  String?
  city     City
  phone    String?
  features String[]
  capacity Int?
  rent     Int?
  dinner   Int?
  lunch    Int?
  after    Int?
  event    Event[]
}

model Budget {
  id          String  @id @default(cuid())
  category    String
  name        String?
  description String?
  paid_method String?
  total_price Int?
  amount_paid Int?
  observation String?
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
}

model Meeting {
  id       String   @id @default(cuid())
  note     String
  date     DateTime @db.Date
  time     String
  reminder Boolean  @default(false)
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  link      String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}


