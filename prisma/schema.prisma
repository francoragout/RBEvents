datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}

enum EventType {
  WEDDING
  BIRTHDAY
  OPENING
  MEETING
  OTHER
}

model Event {
  id          String    @id @default(cuid())
  name        String
  type        EventType
  date        DateTime  @db.Date
  time        String
  venue       String?
  description String?
  archived    Boolean   @default(false)
  tasks       Task[]
}

enum TaskLabel {
  ANA
  BELU
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id       String        @id @default(cuid())
  title    String
  status   TaskStatus
  label    TaskLabel?
  priority TaskPriority?
  event    Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String
}
